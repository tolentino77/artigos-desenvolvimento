O artigo "Big Ball of Mud", escrito por Brian Foote e Joseph Yoder, discute um padrão de arquitetura de software informal e caótico que, apesar de sua natureza desorganizada, é um dos mais comuns na prática. A “Big Ball of Mud” é descrita como um sistema estruturado de forma casual e até mesmo desordenada, onde a urgência é mais determinante que o planejamento. Dentro do artigo é explorado as razões por trás da popularidade duradoura desse padrão e sugere que sua eficácia não pode ser ignorada, pois, para ser tão difundida, deve estar fazendo algo certo.

No artigo podemos identificar várias forças que contribuem para o surgimento da Big ball of Mud. 
Dentre eles podemos citar a falta de tempo para considerar as implicações arquitetônicas de longo prazo, levando assim a decisões mais pragmáticas, especialmente quando os prazos se aproximam. A arquitetura é vista como um luxo ou uma preocupação de longo prazo, enquanto o custo e o tempo de lançamento no mercado são prioridades imediatas. 
A inexperiência do time é outra força citada, já que seja em um novo domínio ou na falta de conhecimento arquitetônico, pode limitar a sofisticação da arquitetura. A versão inicial de um sistema é frequentemente um veículo para programadores aprenderem sobre o problema e as fronteiras da arquitetura passam a surgir depois. 
Os programadores tem diferentes níveis de habilidade e temperamento. Alguns se destacam em criar abstrações, enquanto outros são mais hábeis em navegar e fazer correções no código deixados por outros. 
A arquitetura de software muitas vezes reflete a complexidade inerente do problema, foi o que o autor chamou de complexidade essencial. Além disso, a estrutura do sistema pode espelhar a estrutura e o histórico de organização que o construiu, conforme a Lei de Conway. 
Mudanças inesperadas nos requisitos, como um novo cliente, podem cortar transversalmente as decisões na arquitetura fundamental. Ao invés de desenhar o sistema, a arquitetura é alterada de forma rápida para atender novas exigências. 
Construir uma arquitetura de qualidade é caro, especialmente no início. O retorno sobre o investimento em arquitetura não é imediato e pode se tornar irrelevante se o produto demora demais para dar entrada no mercado. 

Além disso, ao longo do artigo podemos observar alguns padrões que emergem da Big ball of Mud. 
Throwaway Code que seria um código "rápido e sujo" destinado a ser usado uma vez e depois descartado. Frequentemente, esse código ganha vida própria, e a maneira mais rápida de resolver um problema relacionado é modificá-lo, levando-o a se tornar uma "Big Ball of Mud".
Piecemeal Growth: O desenvolvimento do sistema ocorre de forma incremental e não planejada, com o crescimento gradual permitindo que os elementos do sistema se expandam de maneira descontrolada. Tendo por exemplo uma cidade que cresce sem um plano mestre, o software se adapta às necessidades locais e imediatas.
Keep It Working que é prioridade manter o sistema operacional, mesmo que isso signifique fazer pequenas modificações que evitem problemas imediatos, em vez de realizar uma grande reformulação. Este padrão enfatiza preocupações agudas e locais em detrimento das crônicas e arquitetônicas.
Sweeping It Under the Rug que o conceito basicamente seria: se não é possível eliminar a bagunça do código, a solução é isolá-la e cercá-la com uma interface mais compreensível, como uma "fachada". 
Reconstruction é quando o sistema se deteriora a um ponto em que está além do reparo ou compreensão, a única alternativa pode ser "jogar tudo fora e começar de novo". Uma das vantagens de um novo começo é a possibilidade de a nova equipe de programadores entender a arquitetura do zero.
Big Ball of Mud é o padrão principal, que engloba todos os outros. É uma solução onipresente e eficaz para o problema de entregar um sistema funcional sob pressão

O artigo conclui que apesar de os programadores devam se esforçar por uma arquitetura melhor, a “Big Ball of Mud” não é um anti-padrão no sentido tradicional. Existem boas razões para a sua existência, e além disso, sua popularidade atesta sua eficácia em um mundo de software onde o tempo de mercado é muitas vezes um fator crucial. O artigo defende que a arquitetura casual é uma fase natural no início da evolução de um sistema e a sabedoria reside em aprender com a experiência para evoluir para estruturas mais robustas e duráveis. 